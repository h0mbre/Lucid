--- musl-1.2.4/arch/x86_64/pthread_arch.h	2023-05-01 23:39:41.000000000 -0400
+++ musl-1.2.4/arch/x86_64/pthread_arch.h	2024-05-15 11:47:33.932638773 -0400
@@ -1,5 +1,8 @@
+#include <lucid.h>
+
 static inline uintptr_t __get_tp()
 {
+	if (g_lucid_ctx) { return (uintptr_t)(g_lucid_ctx->fs_reg); }
 	uintptr_t tp;
 	__asm__ ("mov %%fs:0,%0" : "=r" (tp) );
 	return tp;

--- musl-1.2.4/arch/x86_64/syscall_arch.h	2023-05-01 23:39:41.000000000 -0400
+++ musl-1.2.4/arch/x86_64/syscall_arch.h	2024-05-15 11:52:07.367124002 -0400
@@ -1,8 +1,13 @@
+#include <lucid.h>
+
 #define __SYSCALL_LL_E(x) (x)
 #define __SYSCALL_LL_O(x) (x)
 
 static __inline long __syscall0(long n)
 {
+	if (g_lucid_syscall)
+		return g_lucid_syscall(g_lucid_ctx, n, 0, 0, 0, 0, 0, 0);
+
 	unsigned long ret;
 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n) : "rcx", "r11", "memory");
 	return ret;
@@ -10,6 +15,9 @@
 
 static __inline long __syscall1(long n, long a1)
 {
+	if (g_lucid_syscall)
+		return g_lucid_syscall(g_lucid_ctx, n, a1, 0, 0, 0, 0, 0);
+
 	unsigned long ret;
 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
 	return ret;
@@ -17,6 +25,9 @@
 
 static __inline long __syscall2(long n, long a1, long a2)
 {
+	if (g_lucid_syscall)
+		return g_lucid_syscall(g_lucid_ctx, n, a1, a2, 0, 0, 0, 0);
+
 	unsigned long ret;
 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
 						  : "rcx", "r11", "memory");
@@ -25,6 +36,9 @@
 
 static __inline long __syscall3(long n, long a1, long a2, long a3)
 {
+	if (g_lucid_syscall)
+		return g_lucid_syscall(g_lucid_ctx, n, a1, a2, a3, 0, 0, 0);
+
 	unsigned long ret;
 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
 						  "d"(a3) : "rcx", "r11", "memory");
@@ -33,6 +47,9 @@
 
 static __inline long __syscall4(long n, long a1, long a2, long a3, long a4)
 {
+	if (g_lucid_syscall)
+		return g_lucid_syscall(g_lucid_ctx, n, a1, a2, a3, a4, 0, 0);
+
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
@@ -42,6 +59,9 @@
 
 static __inline long __syscall5(long n, long a1, long a2, long a3, long a4, long a5)
 {
+	if (g_lucid_syscall)
+		return g_lucid_syscall(g_lucid_ctx, n, a1, a2, a3, a4, a5, 0);
+
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
 	register long r8 __asm__("r8") = a5;
@@ -52,6 +72,9 @@
 
 static __inline long __syscall6(long n, long a1, long a2, long a3, long a4, long a5, long a6)
 {
+	if (g_lucid_syscall)
+		return g_lucid_syscall(g_lucid_ctx, n, a1, a2, a3, a4, a5, a6);
+
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
 	register long r8 __asm__("r8") = a5;

--- musl-1.2.4/include/lucid.h	1969-12-31 19:00:00.000000000 -0500
+++ musl-1.2.4/include/lucid.h	2024-06-21 10:57:32.875945342 -0400
@@ -0,0 +1,118 @@
+#ifndef LUCID_H
+#define LUCID_H
+
+#include <stddef.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+// Data structures in this file will need to remain consistent with the ones
+// defined in context.rs
+//
+// The Calling Convention we use is this
+// r15 - The address of the lucid_ctx_t (g_lucid_ctx)
+
+// These symbols are not defined in Musl
+#include <unistd.h>
+#include <fcntl.h>
+
+#ifndef lseek64
+#define lseek64 lseek
+#endif /* lseek64 */
+
+#ifndef __printf_chk
+#define __printf_chk printf
+#endif /* __printf_chk */
+
+#ifndef __open64_2
+#define __open64_2 open
+#endif /* __open64_2 */
+
+#ifndef mmap64
+#define mmap64 mmap
+#endif /* mmap64 */
+
+// Execution mode (in Bochs or in Lucid)
+typedef enum {
+    BOCHS = 0,
+    LUCID = 1,
+} ExecMode;
+
+// Reasons for exiting a VM
+typedef enum { 
+    NOEXIT = 0,
+    START_BOCHS = 1,
+    TAKE_SNAPSHOT = 2,
+    POST_FUZZ_HOOK = 3,
+    RESUME_BOCHS = 4,
+} VmExit;
+
+// A fake TLS structure that Bochs will access instead of the real TLS
+typedef struct lucid_tls {
+    uint8_t padding[336];
+} lucid_tls_t;
+
+// A data structure to hold all of our GPR data for both Lucid and Bochs when
+// we need to save state, say for a context-switch for example
+typedef struct register_bank {
+    unsigned long rax;
+    unsigned long rbx;
+    unsigned long rcx;
+    unsigned long rdx;
+    unsigned long rsi;
+    unsigned long rdi;
+    unsigned long rbp;
+    unsigned long rsp;
+    unsigned long r8;
+    unsigned long r9;
+    unsigned long r10;
+    unsigned long r11;
+    unsigned long r12;
+    unsigned long r13;
+    unsigned long r14;
+    unsigned long r15;
+} register_bank_t;
+
+// This data structure is initialized for each Lucid - Bochs pairing and is 
+// passed around during the execution of both via pointer. This structure should
+// contain all of the information needed to handle context-switching. This
+// data structure must remain consistent with the Rust definition in context.rs
+typedef struct lucid_ctx {
+    /* This must always be the first member of this struct, these members are
+    not to be moved they are accessed in raw assembly by static offset */ 
+    size_t context_switch;
+    ExecMode mode;
+    register_bank_t lucid_regs;
+    register_bank_t bochs_regs;
+    size_t scratch_rsp;
+    size_t lucid_syscall;
+
+    /* Flexible ordering as long as defined exactly the same in Lucid */
+    lucid_tls_t tls;
+    size_t fs_reg;
+    VmExit exit_reason;
+    uint8_t *coverage_map_addr;
+    size_t coverage_map_size;
+    int crash;
+
+    /* Opaque Members */
+} lucid_ctx_t;
+
+// Pointer to the global execution context, if running inside Lucid, this will
+// point to the a struct lucid_ctx_t inside the Fuzzer 
+extern lucid_ctx_t *g_lucid_ctx;
+
+// Define a function pointer type for lucid_syscall
+typedef long (*lucid_syscall_p)(lucid_ctx_t *ctx, long n, long a1, long a2,
+    long a3, long a4, long a5, long a6);
+
+// Create an instance of the function pointer
+extern lucid_syscall_p g_lucid_syscall;
+
+// Take a snapshot of Bochs for Lucid
+extern void lucid_take_snapshot(void);
+
+// Call into the post-fuzz hook in Lucid
+extern void lucid_postfuzz_hook(void);
+
+#endif // LUCID_H

--- musl-1.2.4/ldso/dlstart.c	2023-05-01 23:39:41.000000000 -0400
+++ musl-1.2.4/ldso/dlstart.c	2024-05-18 20:20:41.761280096 -0400
@@ -2,6 +2,8 @@
 #include "dynlink.h"
 #include "libc.h"
 
+#include <lucid.h>
+
 #ifndef START
 #define START "_dlstart"
 #endif
@@ -20,6 +22,47 @@
 
 hidden void _dlstart_c(size_t *sp, size_t *dynv)
 {
+	// R15 is not clobbered in the earliest code in arch/x86_64/crt_arch.h
+	// so we can just do this here, when Lucid starts Bochs, it will pass the
+	// address of the LucidContext struct in R15, so try to extract that here
+	size_t r15;
+	__asm__ __volatile__(
+		"mov %%r15, %0" : "=r"(r15)
+	);
+
+	// We are running under Lucid
+	if (r15 != 0) {
+		// Initialize the context
+		g_lucid_ctx = (lucid_ctx_t *)r15;
+
+		// Initialize function pointer to lucid_syscall
+		g_lucid_syscall = (lucid_syscall_p)g_lucid_ctx->lucid_syscall;
+
+		// Check these offsets, we depend on these
+		if ((offsetof(lucid_ctx_t, context_switch) != 0x0) 	||
+			(offsetof(lucid_ctx_t, mode) != 0x8)			||
+			(offsetof(lucid_ctx_t, lucid_regs) != 0x10)		||
+			(offsetof(lucid_ctx_t, bochs_regs) != 0x90)		||
+			(offsetof(lucid_ctx_t, scratch_rsp) != 0x110)	||
+			(offsetof(lucid_ctx_t, lucid_syscall) != 0x118))
+		{
+			__asm__ __volatile(
+				"nop\n\t"
+				"nop\n\t"
+				"int3\n\t"
+				"nop\n\t"
+				"nop\n\t"
+			);
+		}
+	}
+
+	// We didn't get a g_lucid_ctx, so we can just run normally
+	else {
+		// NULL these out
+		g_lucid_ctx = NULL;
+		g_lucid_syscall = NULL;
+	}
+
 	size_t i, aux[AUX_CNT], dyn[DYN_CNT];
 	size_t *rel, rel_size, base;
 
@@ -33,6 +76,7 @@
 	for (i=0; auxv[i]; i+=2) if (auxv[i]<AUX_CNT)
 		aux[auxv[i]] = auxv[i+1];
 
+
 #if DL_FDPIC
 	struct fdpic_loadseg *segs, fakeseg;
 	size_t j;
@@ -66,7 +110,7 @@
 	for (i=0; i<DYN_CNT; i++) dyn[i] = 0;
 	for (i=0; dynv[i]; i+=2) if (dynv[i]<DYN_CNT)
 		dyn[dynv[i]] = dynv[i+1];
-
+	
 #if DL_FDPIC
 	for (i=0; i<DYN_CNT; i++) {
 		if (i==DT_RELASZ || i==DT_RELSZ) continue;

--- musl-1.2.4/src/env/__init_tls.c	2023-05-01 23:39:41.000000000 -0400
+++ musl-1.2.4/src/env/__init_tls.c	2024-05-15 11:47:17.316486625 -0400
@@ -11,11 +11,16 @@
 
 volatile int __thread_list_lock;
 
+#ifndef ARCH_SET_FS
+#define ARCH_SET_FS 0x1002
+#endif /* ARCH_SET_FS */
+
 int __init_tp(void *p)
 {
 	pthread_t td = p;
 	td->self = td;
-	int r = __set_thread_area(TP_ADJ(p));
+	int r = syscall(SYS_arch_prctl, ARCH_SET_FS, TP_ADJ(p));
+	//int r = __set_thread_area(TP_ADJ(p));
 	if (r < 0) return -1;
 	if (!r) libc.can_do_threads = 1;
 	td->detach_state = DT_JOINABLE;
@@ -24,6 +29,7 @@
 	td->robust_list.head = &td->robust_list.head;
 	td->sysinfo = __sysinfo;
 	td->next = td->prev = td;
+
 	return 0;
 }
 
@@ -134,6 +140,7 @@
 #ifndef SYS_mmap2
 #define SYS_mmap2 SYS_mmap
 #endif
+		__asm__ __volatile__ ("int3");
 		mem = (void *)__syscall(
 			SYS_mmap2,
 			0, libc.tls_size, PROT_READ|PROT_WRITE,
@@ -142,7 +149,9 @@
 		 * so don't bloat the init code checking for error codes and
 		 * explicitly calling a_crash(). */
 	} else {
-		mem = builtin_tls;
+		// Check to see if we're running under Lucid or not
+		if (!g_lucid_ctx) { mem = builtin_tls; }
+		else { mem = &g_lucid_ctx->tls; }
 	}
 
 	/* Failure to initialize thread pointer is always fatal. */

--- musl-1.2.4/src/ldso/x86_64/tlsdesc.s	2023-05-01 23:39:41.000000000 -0400
+++ musl-1.2.4/src/ldso/x86_64/tlsdesc.s	2024-05-29 17:07:32.395175956 -0400
@@ -3,6 +3,7 @@
 .hidden __tlsdesc_static
 .type __tlsdesc_static,@function
 __tlsdesc_static:
+	int3
 	mov 8(%rax),%rax
 	ret
 
@@ -10,6 +11,7 @@
 .hidden __tlsdesc_dynamic
 .type __tlsdesc_dynamic,@function
 __tlsdesc_dynamic:
+	int3
 	mov 8(%rax),%rax
 	push %rdx
 	mov %fs:8,%rdx

--- musl-1.2.4/src/lucid/lucid.c	1969-12-31 19:00:00.000000000 -0500
+++ musl-1.2.4/src/lucid/lucid.c	2024-06-21 10:57:44.072015103 -0400
@@ -0,0 +1,57 @@
+#include <lucid.h>
+
+// Define the global execution context pointer
+lucid_ctx_t *g_lucid_ctx = NULL;
+
+// Define the function pointer
+lucid_syscall_p g_lucid_syscall = NULL;
+
+// Call into Lucid to take snapshot of current Bochs state
+__attribute__((optimize(0))) void lucid_take_snapshot(void) {
+    if (!g_lucid_ctx)
+        return;
+
+    // Set execution mode to Bochs
+    g_lucid_ctx->mode = BOCHS;
+
+    // Set the exit reason
+    g_lucid_ctx->exit_reason = TAKE_SNAPSHOT;
+
+    // Inline assembly to switch context back to fuzzer
+    __asm__ (
+        "push %%r15\n\t"          // Save r15 register
+        "mov %0, %%r15\n\t"       // Move context pointer into r15
+        "call *(%%r15)\n\t"       // Call context_switch
+        "pop %%r15"               // Restore r15 register
+        :                         // No output
+        : "r" (g_lucid_ctx)       // Input
+        : "memory"                // Clobber
+    );
+
+    return;
+}
+
+// Call into Lucid after fuzzcase
+__attribute__((optimize(0))) void lucid_postfuzz_hook(void) {
+    if (!g_lucid_ctx)
+        return;
+
+    // Set execution mode to Bochs
+    g_lucid_ctx->mode = BOCHS;
+
+    // Set the exit reason
+    g_lucid_ctx->exit_reason = POST_FUZZ_HOOK;
+
+    // Inline assembly to switch context back to fuzzer
+    __asm__ (
+        "push %%r15\n\t"          // Save r15 register
+        "mov %0, %%r15\n\t"       // Move context pointer into r15
+        "call *(%%r15)\n\t"       // Call context_switch
+        "pop %%r15"               // Restore r15 register
+        :                         // No output
+        : "r" (g_lucid_ctx)       // Input
+        : "memory"                // Clobber
+    );
+
+    return;
+}
\ No newline at end of file
